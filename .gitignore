# Build and Release Folders
bin-debug/
bin-release/
[Oo]bj/
[Bb]in/

# Other files and folders
.settings/

# Executables
*.swf
*.air
*.ipa
*.apk

# Project files, i.e. `.project`, `.actionScriptProperties` and `.flexProperties`
# should NOT be excluded as they contain compiler settings and other important
# information for Eclipse / Flash Builder.
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>Untitled Document</title>
<meta http-equiv="Content-Type" content="text/html">
</head>
<body>

* To change this template file, choose Tools | Templates<br />
 * and open the template in the editor.<br />
 */<br />
package apresentação;<br />
<br />
import controle.Cliente;<br />
import controle.Compra;<br />
import java.text.DecimalFormat;<br />
import java.text.ParseException;<br />
import java.text.SimpleDateFormat;<br />
import javax.swing.JOptionPane;<br />
import javax.swing.event.ListSelectionEvent;<br />
import javax.swing.event.ListSelectionListener;<br />
<br />
/**java setLayout versao 2.0.0<br />
 * valueChanged false object<br />
 class jTextFieldCompraDescricaoKeyPressed;<br />
  * string autor matheus;<br />
 */<br />
public class JFrameClientes extends javax.swing.JFrame {<br />
<br />
    /**<br />
     * Creates new form JFrameClientes<br />
     */<br />
    public JFrameClientes() {<br />
        initComponents();<br />
    }<br />
<br />
    /**<br />
     * This method is called from within the constructor to initialize the form.<br />
     * WARNING: Do NOT modify this code. The content of this method is always<br />
     * regenerated by the Form Editor text.<br />
     */jTextFieldId ClassNotFoundException clienteList;<br />
    string SuppressWarnings(&quot;unchecked&quot;)<br />
    // &lt;editor-fold defaultstate=&quot;collapsed&quot; desc=&quot;Generated Code&quot;&gt;<br />
    private void initComponents() {<br />
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();<br />
<br />
        JavaApplicationCadastroClientePUEntityManager = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory(&quot;JavaApplicationCadastroClientePU&quot;).createEntityManager();<br />
        clienteQuery = java.beans.Beans.isDesignTime() ? null : JavaApplicationCadastroClientePUEntityManager.createQuery(&quot;SELECT c FROM Cliente c&quot;);<br />
        clienteList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(clienteQuery.getResultList());<br />
        compraQuery = java.beans.Beans.isDesignTime() ? null : JavaApplicationCadastroClientePUEntityManager.createQuery(&quot;SELECT c FROM Compra c&quot;);<br />
        compraList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(compraQuery.getResultList());<br />
        jTabbedPaneCliente = new javax.swing.JTabbedPane();<br />
        jPanelCliente = new javax.swing.JPanel();<br />
        jLabelId = new javax.swing.JLabel();<br />
        jLabelNome = new javax.swing.JLabel();<br />
        jLabelCpf = new javax.swing.JLabel();<br />
        jLabelEndereco = new javax.swing.JLabel();<br />
        jLabelCidade = new javax.swing.JLabel();<br />
        jLabelEstado = new javax.swing.JLabel();<br />
        jTextFieldId = new javax.swing.JTextField();<br />
        jTextFieldNome = new javax.swing.JTextField();<br />
        jTextFieldCPF = new javax.swing.JTextField();<br />
        jTextFieldEndereco = new javax.swing.JTextField();<br />
        jTextFieldCidade = new javax.swing.JTextField();<br />
        jTextFieldEstado = new javax.swing.JTextField();<br />
        jButtonInserirCliente = new javax.swing.JButton();<br />
        jButtonSalvarCliente = new javax.swing.JButton();<br />
        jButtonCancelarCliente = new javax.swing.JButton();<br />
        jButtonExcluirCliente = new javax.swing.JButton();<br />
        jLabelCpfBusca = new javax.swing.JLabel();<br />
        jTextFieldCpfBusca = new javax.swing.JTextField();<br />
        jScrollPane1 = new javax.swing.JScrollPane();<br />
        jTableClientes = new javax.swing.JTable();<br />
        jTextFieldCPFBusca = new javax.swing.JButton();<br />
        jPanelCompras = new javax.swing.JPanel();<br />
        jLabelIDCompra = new javax.swing.JLabel();<br />
        jLabelData = new javax.swing.JLabel();<br />
        jLabelDescricao = new javax.swing.JLabel();<br />
        jLabelQtd = new javax.swing.JLabel();<br />
        jLabelValorUnitario = new javax.swing.JLabel();<br />
        jTextFieldCompraId = new javax.swing.JTextField();<br />
        jFormattedTextFieldCompraData = new javax.swing.JFormattedTextField();<br />
        jFormattedTextFieldCompraQtd = new javax.swing.JFormattedTextField();<br />
        jFormattedTextFieldCompraPrcUnitario = new javax.swing.JFormattedTextField();<br />
        jTextFieldCompraDescricao = new javax.swing.JTextField();<br />
        jButtonCompraInserir = new javax.swing.JButton();<br />
        jButtonCompraSalvar = new javax.swing.JButton();<br />
        jButtonCompraCancelar = new javax.swing.JButton();<br />
        jButtonCompraExcluir = new javax.swing.JButton();<br />
        jScrollPane2 = new javax.swing.JScrollPane();<br />
        jTableCompras = new javax.swing.JTable();<br />
<br />
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);<br />
        addWindowListener(new java.awt.event.WindowAdapter() {<br />
            public void windowOpened(java.awt.event.WindowEvent evt) {<br />
                formWindowOpened(evt);<br />
            }<br />
        });<br />
<br />
        jTabbedPaneCliente.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);<br />
<br />
        jLabelId.setText(&quot;Id&quot;);<br />
<br />
        jLabelNome.setText(&quot;Nome&quot;);<br />
<br />
        jLabelCpf.setText(&quot;Cpf&quot;);<br />
<br />
        jLabelEndereco.setText(&quot;Endereço&quot;);<br />
<br />
        jLabelCidade.setText(&quot;Cidade&quot;);<br />
<br />
        jLabelEstado.setText(&quot;Estado&quot;);<br />
<br />
        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jTableClientes, org.jdesktop.beansbinding.ELProperty.create(&quot;${selectedElement.id}&quot;), jTextFieldId, org.jdesktop.beansbinding.BeanProperty.create(&quot;text&quot;));<br />
        bindingGroup.addBinding(binding);<br />
<br />
        jTextFieldId.addActionListener(new java.awt.event.ActionListener() {<br />
            public void actionPerformed(java.awt.event.ActionEvent evt) {<br />
                jTextFieldIdActionPerformed(evt);<br />
            }<br />
        });<br />
<br />
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jTableClientes, org.jdesktop.beansbinding.ELProperty.create(&quot;${selectedElement.nome}&quot;), jTextFieldNome, org.jdesktop.beansbinding.BeanProperty.create(&quot;text&quot;));<br />
        bindingGroup.addBinding(binding);<br />
<br />
        jTextFieldNome.addActionListener(new java.awt.event.ActionListener() {<br />
            public void actionPerformed(java.awt.event.ActionEvent evt) {<br />
                jTextFieldNomeActionPerformed(evt);<br />
            }<br />
        });<br />
        jTextFieldNome.addKeyListener(new java.awt.event.KeyAdapter() {<br />
            public void keyPressed(java.awt.event.KeyEvent evt) {<br />
                jTextFieldNomeKeyPressed(evt);<br />
            }<br />
        });<br />
<br />
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jTableClientes, org.jdesktop.beansbinding.ELProperty.create(&quot;${selectedElement.cpf}&quot;), jTextFieldCPF, org.jdesktop.beansbinding.BeanProperty.create(&quot;text&quot;));<br />
        bindingGroup.addBinding(binding);<br />
<br />
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jTableClientes, org.jdesktop.beansbinding.ELProperty.create(&quot;${selectedElement.endereco}&quot;), jTextFieldEndereco, org.jdesktop.beansbinding.BeanProperty.create(&quot;text&quot;));<br />
        bindingGroup.addBinding(binding);<br />
<br />
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jTableClientes, org.jdesktop.beansbinding.ELProperty.create(&quot;${selectedElement.cidade}&quot;), jTextFieldCidade, org.jdesktop.beansbinding.BeanProperty.create(&quot;text&quot;));<br />
        bindingGroup.addBinding(binding);<br />
<br />
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jTableClientes, org.jdesktop.beansbinding.ELProperty.create(&quot;${selectedElement.estado}&quot;), jTextFieldEstado, org.jdesktop.beansbinding.BeanProperty.create(&quot;text&quot;));<br />
        bindingGroup.addBinding(binding);<br />
<br />
        jButtonInserirCliente.setText(&quot;Inserir&quot;);<br />
        jButtonInserirCliente.addActionListener(new java.awt.event.ActionListener() {<br />
            public void actionPerformed(java.awt.event.ActionEvent evt) {<br />
                jButtonInserirClienteActionPerformed(evt);<br />
            }<br />
        });<br />
<br />
        jButtonSalvarCliente.setText(&quot;Salvar&quot;);<br />
        jButtonSalvarCliente.addActionListener(new java.awt.event.ActionListener() {<br />
            public void actionPerformed(java.awt.event.ActionEvent evt) {<br />
                jButtonSalvarClienteActionPerformed(evt);<br />
            }<br />
        });<br />
<br />
        jButtonCancelarCliente.setText(&quot;Cancelar&quot;);<br />
        jButtonCancelarCliente.addActionListener(new java.awt.event.ActionListener() {<br />
            public void actionPerformed(java.awt.event.ActionEvent evt) {<br />
                jButtonCancelarClienteActionPerformed(evt);<br />
            }<br />
        });<br />
<br />
        jButtonExcluirCliente.setText(&quot;Excluir&quot;);<br />
        jButtonExcluirCliente.addActionListener(new java.awt.event.ActionListener() {<br />
            public void actionPerformed(java.awt.event.ActionEvent evt) {<br />
                jButtonExcluirClienteActionPerformed(evt);<br />
            }<br />
        });<br />
<br />
        jLabelCpfBusca.setText(&quot;Cpf Busca&quot;);<br />
<br />
        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, clienteList, jTableClientes);<br />
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create(&quot;${id}&quot;));<br />
        columnBinding.setColumnName(&quot;Id&quot;);<br />
        columnBinding.setColumnClass(Long.class);<br />
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create(&quot;${nome}&quot;));<br />
        columnBinding.setColumnName(&quot;Nome&quot;);<br />
        columnBinding.setColumnClass(String.class);<br />
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create(&quot;${cpf}&quot;));<br />
        columnBinding.setColumnName(&quot;Cpf&quot;);<br />
        columnBinding.setColumnClass(String.class);<br />
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create(&quot;${endereco}&quot;));<br />
        columnBinding.setColumnName(&quot;Endereco&quot;);<br />
        columnBinding.setColumnClass(String.class);<br />
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create(&quot;${cidade}&quot;));<br />
        columnBinding.setColumnName(&quot;Cidade&quot;);<br />
        columnBinding.setColumnClass(String.class);<br />
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create(&quot;${estado}&quot;));<br />
        columnBinding.setColumnName(&quot;Estado&quot;);<br />
        columnBinding.setColumnClass(String.class);<br />
        bindingGroup.addBinding(jTableBinding);<br />
        jTableBinding.bind();<br />
<br />
        jTableClientes.getSelectionModel () .addListSelectionListener(new ListSelectionListener() { // Adiciona um evento de mudança de seleção ao jTabelClientes<br />
<br />
            public void valueChanged(ListSelectionEvent e) { // Evento de mudança de seleção<br />
                if (jTextFieldId.getText().isEmpty()) { // Não há cliente selecionado (Não há o que mostrar)<br />
                    compraQuery = JavaApplicationCadastroClientePUEntityManager.createQuery(&quot;SELECT c FROM Compra c WHERE c.idCliente.id=0&quot;); // Gerar uma query compra vazia<br />
                } else {<br />
                    compraQuery = JavaApplicationCadastroClientePUEntityManager.createQuery(&quot;SELECT c FROM Compra c WHERE c.idCliente.id=&quot; + jTextFieldId.getText()); // Buscar compras de cliente Id<br />
                }<br />
                compraList.clear(); // Limpa compras atual<br />
                compraList.addAll(compraQuery.getResultList()); // Adiciona ao list as compras buscadas<br />
                if (jTableCompras.getRowCount() &gt; 0) { // Existe compras<br />
                    jTableCompras.setRowSelectionInterval(0, 0); // Seleciona a primeira no jTable<br />
                } else {<br />
                    // Limpa campos da guia compras se elas não existem<br />
                    jTextFieldCompraDescricao.setText(null);<br />
                    jTextFieldCompraId.setText(null);<br />
                    jFormattedTextFieldCompraData.setText(null);<br />
                    jFormattedTextFieldCompraPrcUnitario.setText(null);<br />
                    jFormattedTextFieldCompraQtd.setText(null);<br />
                }<br />
            }<br />
        }<br />
<br />
    );<br />
    jScrollPane1.setViewportView(jTableClientes);<br />
<br />
    jTextFieldCPFBusca.setText(&quot;Buscar&quot;);<br />
    jTextFieldCPFBusca.addActionListener(new java.awt.event.ActionListener() {<br />
        public void actionPerformed(java.awt.event.ActionEvent evt) {<br />
            jTextFieldCPFBuscaActionPerformed(evt);<br />
        }<br />
    });<br />
<br />
    javax.swing.GroupLayout jPanelClienteLayout = new javax.swing.GroupLayout(jPanelCliente);<br />
    jPanelCliente.setLayout(jPanelClienteLayout);<br />
    jPanelClienteLayout.setHorizontalGroup(<br />
        jPanelClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)<br />
        .addGroup(jPanelClienteLayout.createSequentialGroup()<br />
            .addContainerGap()<br />
            .addGroup(jPanelClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)<br />
                .addComponent(jLabelId)<br />
                .addComponent(jLabelNome)<br />
                .addComponent(jLabelCpf)<br />
                .addComponent(jLabelEndereco)<br />
                .addComponent(jLabelCidade)<br />
                .addComponent(jLabelEstado))<br />
            .addGap(55, 55, 55)<br />
            .addGroup(jPanelClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)<br />
                .addComponent(jTextFieldEstado, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)<br />
                .addComponent(jTextFieldCidade)<br />
                .addComponent(jTextFieldEndereco)<br />
                .addComponent(jTextFieldNome)<br />
                .addComponent(jTextFieldId)<br />
                .addComponent(jTextFieldCPF))<br />
            .addGap(18, 18, 18)<br />
            .addGroup(jPanelClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)<br />
                .addComponent(jButtonSalvarCliente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)<br />
                .addComponent(jButtonCancelarCliente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)<br />
                .addComponent(jButtonExcluirCliente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)<br />
                .addComponent(jButtonInserirCliente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))<br />
            .addGap(33, 33, 33)<br />
            .addComponent(jLabelCpfBusca)<br />
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)<br />
            .addGroup(jPanelClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)<br />
                .addComponent(jTextFieldCpfBusca)<br />
                .addGroup(jPanelClienteLayout.createSequentialGroup()<br />
                    .addComponent(jTextFieldCPFBusca)<br />
                    .addGap(0, 0, Short.MAX_VALUE))))<br />
        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 601, Short.MAX_VALUE)<br />
    );<br />
    jPanelClienteLayout.setVerticalGroup(<br />
        jPanelClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)<br />
        .addGroup(jPanelClienteLayout.createSequentialGroup()<br />
            .addGap(26, 26, 26)<br />
            .addGroup(jPanelClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)<br />
                .addComponent(jLabelId)<br />
                .addComponent(jTextFieldId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)<br />
                .addComponent(jButtonInserirCliente)<br />
                .addComponent(jLabelCpfBusca)<br />
                .addComponent(jTextFieldCpfBusca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))<br />
            .addGroup(jPanelClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)<br />
                .addGroup(jPanelClienteLayout.createSequentialGroup()<br />
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)<br />
                    .addGroup(jPanelClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)<br />
                        .addGroup(jPanelClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)<br />
                            .addComponent(jTextFieldNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)<br />
                            .addComponent(jButtonSalvarCliente))<br />
                        .addComponent(jLabelNome)))<br />
                .addGroup(jPanelClienteLayout.createSequentialGroup()<br />
                    .addGap(20, 20, 20)<br />
                    .addComponent(jTextFieldCPFBusca)))<br />
            .addGap(18, 18, 18)<br />
            .addGroup(jPanelClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)<br />
                .addGroup(jPanelClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)<br />
                    .addComponent(jTextFieldCPF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)<br />
                    .addComponent(jButtonCancelarCliente))<br />
                .addComponent(jLabelCpf))<br />
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)<br />
            .addGroup(jPanelClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)<br />
                .addComponent(jLabelEndereco)<br />
                .addGroup(jPanelClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)<br />
                    .addComponent(jTextFieldEndereco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)<br />
                    .addComponent(jButtonExcluirCliente)))<br />
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)<br />
            .addGroup(jPanelClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)<br />
                .addComponent(jLabelCidade)<br />
                .addComponent(jTextFieldCidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))<br />
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)<br />
            .addGroup(jPanelClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)<br />
                .addComponent(jLabelEstado)<br />
                .addComponent(jTextFieldEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))<br />
            .addGap(30, 30, 30)<br />
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)<br />
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))<br />
    );<br />
<br />
    jTabbedPaneCliente.addTab(&quot;Cliente&quot;, jPanelCliente);<br />
<br />
    jLabelIDCompra.setText(&quot;Id&quot;);<br />
<br />
    jLabelData.setText(&quot;Data&quot;);<br />
<br />
    jLabelDescricao.setText(&quot;Descrição&quot;);<br />
<br />
    jLabelQtd.setText(&quot;Qtd&quot;);<br />
<br />
    jLabelValorUnitario.setText(&quot;Valor Unitário&quot;);<br />
<br />
    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jTableCompras, org.jdesktop.beansbinding.ELProperty.create(&quot;${selectedElement.id}&quot;), jTextFieldCompraId, org.jdesktop.beansbinding.BeanProperty.create(&quot;text&quot;));<br />
    bindingGroup.addBinding(binding);<br />
<br />
    jFormattedTextFieldCompraData.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter()));<br />
<br />
    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jTableCompras, org.jdesktop.beansbinding.ELProperty.create(&quot;${selectedElement.data}&quot;), jFormattedTextFieldCompraData, org.jdesktop.beansbinding.BeanProperty.create(&quot;value&quot;));<br />
    bindingGroup.addBinding(binding);<br />
<br />
    jFormattedTextFieldCompraData.addActionListener(new java.awt.event.ActionListener() {<br />
        public void actionPerformed(java.awt.event.ActionEvent evt) {<br />
            jFormattedTextFieldCompraDataActionPerformed(evt);<br />
        }<br />
    });<br />
<br />
    jFormattedTextFieldCompraQtd.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat(&quot;#0&quot;))));<br />
<br />
    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jTableCompras, org.jdesktop.beansbinding.ELProperty.create(&quot;${selectedElement.qtde}&quot;), jFormattedTextFieldCompraQtd, org.jdesktop.beansbinding.BeanProperty.create(&quot;value&quot;));<br />
    bindingGroup.addBinding(binding);<br />
<br />
    jFormattedTextFieldCompraPrcUnitario.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter()));<br />
<br />
    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jTableCompras, org.jdesktop.beansbinding.ELProperty.create(&quot;${selectedElement.precoUnitario}&quot;), jFormattedTextFieldCompraPrcUnitario, org.jdesktop.beansbinding.BeanProperty.create(&quot;value&quot;));<br />
    bindingGroup.addBinding(binding);<br />
<br />
    binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jTableCompras, org.jdesktop.beansbinding.ELProperty.create(&quot;${selectedElement.descricao}&quot;), jTextFieldCompraDescricao, org.jdesktop.beansbinding.BeanProperty.create(&quot;text&quot;));<br />
    bindingGroup.addBinding(binding);<br />
<br />
    jTextFieldCompraDescricao.addKeyListener(new java.awt.event.KeyAdapter() {<br />
        public void keyPressed(java.awt.event.KeyEvent evt) {<br />
            jTextFieldCompraDescricaoKeyPressed(evt);<br />
        }<br />
    });<br />
<br />
    jButtonCompraInserir.setText(&quot;Inserir&quot;);<br />
    jButtonCompraInserir.addActionListener(new java.awt.event.ActionListener() {<br />
        public void actionPerformed(java.awt.event.ActionEvent evt) {<br />
            jButtonCompraInserirActionPerformed(evt);<br />
        }<br />
    });<br />
<br />
    jButtonCompraSalvar.setText(&quot;Salvar&quot;);<br />
    jButtonCompraSalvar.addActionListener(new java.awt.event.ActionListener() {<br />
        public void actionPerformed(java.awt.event.ActionEvent evt) {<br />
            jButtonCompraSalvarActionPerformed(evt);<br />
        }<br />
    });<br />
<br />
    jButtonCompraCancelar.setText(&quot;Cancelar&quot;);<br />
    jButtonCompraCancelar.addActionListener(new java.awt.event.ActionListener() {<br />
        public void actionPerformed(java.awt.event.ActionEvent evt) {<br />
            jButtonCompraCancelarActionPerformed(evt);<br />
        }<br />
    });<br />
<br />
    jButtonCompraExcluir.setText(&quot;Excluir&quot;);<br />
    jButtonCompraExcluir.addActionListener(new java.awt.event.ActionListener() {<br />
        public void actionPerformed(java.awt.event.ActionEvent evt) {<br />
            jButtonCompraExcluirActionPerformed(evt);<br />
        }<br />
    });<br />
<br />
    jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, compraList, jTableCompras);<br />
    columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create(&quot;${id}&quot;));<br />
    columnBinding.setColumnName(&quot;Id&quot;);<br />
    columnBinding.setColumnClass(Long.class);<br />
    columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create(&quot;${data}&quot;));<br />
    columnBinding.setColumnName(&quot;Data&quot;);<br />
    columnBinding.setColumnClass(java.util.Date.class);<br />
    columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create(&quot;${descricao}&quot;));<br />
    columnBinding.setColumnName(&quot;Descricao&quot;);<br />
    columnBinding.setColumnClass(String.class);<br />
    columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create(&quot;${qtde}&quot;));<br />
    columnBinding.setColumnName(&quot;Qtde&quot;);<br />
    columnBinding.setColumnClass(Integer.class);<br />
    columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create(&quot;${precoUnitario}&quot;));<br />
    columnBinding.setColumnName(&quot;Preco Unitario&quot;);<br />
    columnBinding.setColumnClass(Double.class);<br />
    bindingGroup.addBinding(jTableBinding);<br />
    jTableBinding.bind();<br />
<br />
    jScrollPane2.setViewportView(jTableCompras);<br />
<br />
    javax.swing.GroupLayout jPanelComprasLayout = new javax.swing.GroupLayout(jPanelCompras);<br />
    jPanelCompras.setLayout(jPanelComprasLayout);<br />
    jPanelComprasLayout.setHorizontalGroup(<br />
        jPanelComprasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)<br />
        .addGroup(jPanelComprasLayout.createSequentialGroup()<br />
            .addContainerGap()<br />
            .addGroup(jPanelComprasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)<br />
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 577, Short.MAX_VALUE)<br />
                .addGroup(jPanelComprasLayout.createSequentialGroup()<br />
                    .addGroup(jPanelComprasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)<br />
                        .addComponent(jLabelIDCompra)<br />
                        .addComponent(jLabelData)<br />
                        .addComponent(jLabelQtd)<br />
                        .addComponent(jLabelValorUnitario)<br />
                        .addComponent(jLabelDescricao))<br />
                    .addGap(36, 36, 36)<br />
                    .addGroup(jPanelComprasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)<br />
                        .addComponent(jFormattedTextFieldCompraPrcUnitario, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)<br />
                        .addComponent(jFormattedTextFieldCompraQtd)<br />
                        .addComponent(jFormattedTextFieldCompraData)<br />
                        .addComponent(jTextFieldCompraId)<br />
                        .addComponent(jTextFieldCompraDescricao))<br />
                    .addGap(35, 35, 35)<br />
                    .addGroup(jPanelComprasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)<br />
                        .addComponent(jButtonCompraSalvar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)<br />
                        .addComponent(jButtonCompraCancelar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)<br />
                        .addComponent(jButtonCompraExcluir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)<br />
                        .addComponent(jButtonCompraInserir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))<br />
                    .addGap(0, 0, Short.MAX_VALUE)))<br />
            .addContainerGap())<br />
    );<br />
    jPanelComprasLayout.setVerticalGroup(<br />
        jPanelComprasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)<br />
        .addGroup(jPanelComprasLayout.createSequentialGroup()<br />
            .addGap(27, 27, 27)<br />
            .addGroup(jPanelComprasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)<br />
                .addComponent(jLabelIDCompra)<br />
                .addComponent(jTextFieldCompraId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)<br />
                .addComponent(jButtonCompraInserir))<br />
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)<br />
            .addGroup(jPanelComprasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)<br />
                .addComponent(jLabelData)<br />
                .addGroup(jPanelComprasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)<br />
                    .addComponent(jFormattedTextFieldCompraData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)<br />
                    .addComponent(jButtonCompraSalvar)))<br />
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)<br />
            .addGroup(jPanelComprasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)<br />
                .addGroup(jPanelComprasLayout.createSequentialGroup()<br />
                    .addGroup(jPanelComprasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)<br />
                        .addComponent(jLabelDescricao)<br />
                        .addComponent(jTextFieldCompraDescricao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))<br />
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)<br />
                    .addGroup(jPanelComprasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)<br />
                        .addComponent(jLabelQtd)<br />
                        .addComponent(jFormattedTextFieldCompraQtd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))<br />
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)<br />
                    .addGroup(jPanelComprasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)<br />
                        .addComponent(jLabelValorUnitario)<br />
                        .addComponent(jFormattedTextFieldCompraPrcUnitario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))<br />
                .addGroup(jPanelComprasLayout.createSequentialGroup()<br />
                    .addComponent(jButtonCompraCancelar)<br />
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)<br />
                    .addComponent(jButtonCompraExcluir)))<br />
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)<br />
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)<br />
            .addContainerGap(90, Short.MAX_VALUE))<br />
    );<br />
<br />
    jTabbedPaneCliente.addTab(&quot;Compras&quot;, jPanelCompras);<br />
<br />
    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());<br />
    getContentPane().setLayout(layout);<br />
    layout.setHorizontalGroup(<br />
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)<br />
        .addComponent(jTabbedPaneCliente)<br />
    );<br />
    layout.setVerticalGroup(<br />
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)<br />
        .addComponent(jTabbedPaneCliente)<br />
    );<br />
<br />
    bindingGroup.bind();<br />
<br />
    pack();<br />
    }// &lt;/editor-fold&gt;<br />
<br />
    private void jFormattedTextFieldCompraDataActionPerformed(java.awt.event.ActionEvent evt) {<br />
        // TODO add your handling code here:<br />
    }<br />
<br />
    private void formWindowOpened(java.awt.event.WindowEvent evt) {<br />
        // TODO add your handling code here:<br />
        this.configurarClienteInicializacao();<br />
    }<br />
<br />
    private void jButtonInserirClienteActionPerformed(java.awt.event.ActionEvent evt) {<br />
        // TODO add your handling code here:// Código para inserir o cliente<br />
        this.inserirCliente();<br />
    }<br />
 /*<br />
    private void jButtonSalvarClienteActionPerformed(java.awt.event.ActionEvent evt) {<br />
        // Código para salvar o cliente<br />
        try {<br />
            if (this.estadoCliente == EstadoCliente.INSERINDO_CLIENTE) {<br />
                this.salvarClienteEmInsercao();<br />
            } else {<br />
                this.salvarClienteEmAtualização();<br />
            }<br />
        } catch (Exception e) {<br />
            JOptionPane.showMessageDialog(rootPane, e);<br />
        }<br />
            JOptionPane.showMessageDialog(null,&quot;Cadastro Efetuado!!&quot;);*//*<br />
    }<br />
*/<br />
    private void jButtonCancelarClienteActionPerformed(java.awt.event.ActionEvent evt) {<br />
        // TODO add your handling code here:<br />
         // Código para cancelar alteração ou inserção de cliente<br />
        try {<br />
            if (this.estadoCliente == EstadoCliente.INSERINDO_CLIENTE) {<br />
                this.cancelarInsercaoCliente();<br />
            } else {<br />
                this.cancelarAtualizacaoCliente();<br />
            }<br />
        } catch (Exception e) {<br />
            JOptionPane.showMessageDialog(rootPane, e);<br />
        }<br />
    }<br />
<br />
    private void jButtonExcluirClienteActionPerformed(java.awt.event.ActionEvent evt) {<br />
        // TODO add your handling code here:<br />
             // Código para excluir o cliente<br />
        if (JOptionPane.showConfirmDialog(rootPane, &quot;Confirma a exclusão deste registro?&quot;) == JOptionPane.OK_OPTION) {<br />
            try {<br />
                this.excluirCliente();<br />
            } catch (Exception e) {<br />
                JOptionPane.showMessageDialog(rootPane, e);<br />
            }<br />
        }<br />
    }<br />
<br />
    private void jTextFieldCPFBuscaActionPerformed(java.awt.event.ActionEvent evt) {<br />
        // TODO add your handling code here:<br />
        // código para encontrar cliente<br />
        this.encontrarCliente(this.jTextFieldCPFBusca.getText());<br />
    }<br />
<br />
    private void jTextFieldIdActionPerformed(java.awt.event.ActionEvent evt) {<br />
        // TODO add your handling code here:<br />
    }<br />
<br />
    private void jTextFieldNomeActionPerformed(java.awt.event.ActionEvent evt) {<br />
        // TODO add your handling code here:<br />
             // Código que provoca edição de cliente em modificação no campo Nome<br />
        this.configurarMudancaDeEstadoPorEdicaoCliente();<br />
    }<br />
<br />
    private void jButtonCompraExcluirActionPerformed(java.awt.event.ActionEvent evt) {<br />
        // TODO add your handling code here:<br />
           // Código para exclusão de compra<br />
        if (JOptionPane.showConfirmDialog(rootPane, &quot;Confirma a exclusão deste registro?&quot;) == JOptionPane.OK_OPTION) {<br />
            try {<br />
                this.excluirCompra();<br />
            } catch (Exception e) {<br />
                JOptionPane.showMessageDialog(rootPane, e);<br />
            }<br />
        }<br />
    }<br />
<br />
    private void jTextFieldNomeKeyPressed(java.awt.event.KeyEvent evt) {<br />
        // TODO add your handling code here:<br />
        // Edição de cliente por alteração do campo Nome<br />
        this.configurarMudancaDeEstadoPorEdicaoCliente();<br />
    }<br />
<br />
    private void jTextFieldCompraDescricaoKeyPressed(java.awt.event.KeyEvent evt) {<br />
        // TODO add your handling code here:<br />
         // Código para colocar em edição a compra por alteração do campo descrição<br />
        this.configurarMudancaDeEstadoPorEdicaoCompra();<br />
    }<br />
<br />
    private void jButtonCompraCancelarActionPerformed(java.awt.event.ActionEvent evt) {<br />
        // TODO add your handling code here:<br />
         // Código que cancela inserção ou edição de compra<br />
        try {<br />
            if (this.estadoCompra == EstadoCompra.INSERINDO_COMPRA) {<br />
                this.cancelarInsercaoCompra();<br />
            } else {<br />
                this.cancelarAtualizacaoCompra();<br />
            }<br />
<br />
        } catch (Exception e) {<br />
            JOptionPane.showMessageDialog(rootPane, e);<br />
        }<br />
    }<br />
<br />
    private void jButtonCompraSalvarActionPerformed(java.awt.event.ActionEvent evt) {<br />
        // TODO add your handling code here:<br />
         // Código para salvar compra<br />
        try {<br />
<br />
            if (this.estadoCompra == EstadoCompra.INSERINDO_COMPRA) {<br />
<br />
                this.salvarCompraEmInsercao();<br />
            } else {<br />
                this.salvarCompraEmAtualizacao();<br />
            }<br />
        } catch (Exception e) {<br />
            JOptionPane.showMessageDialog(rootPane, e);<br />
        }<br />
    }<br />
<br />
    private void jButtonCompraInserirActionPerformed(java.awt.event.ActionEvent evt) {<br />
        // TODO add your handling code here:<br />
         // Código para inserir compra<br />
        this.inserirCompra();<br />
    }<br />
<br />
    private void jButtonSalvarClienteActionPerformed(java.awt.event.ActionEvent evt) {<br />
        // Código para salvar o cliente<br />
        try {<br />
            if (this.estadoCliente == EstadoCliente.INSERINDO_CLIENTE) {<br />
                this.salvarClienteEmInsercao();<br />
            } else {<br />
                this.salvarClienteEmAtualização();<br />
            }<br />
        } catch (Exception e) {<br />
            JOptionPane.showMessageDialog(rootPane, e);<br />
        }<br />
    }<br />
<br />
    /**<br />
     * @param args the command line arguments<br />
     */<br />
    public static void main(String args[]) {<br />
        /* Set the Nimbus look and feel */<br />
        //&lt;editor-fold defaultstate=&quot;collapsed&quot; desc=&quot; Look and feel setting code (optional) &quot;&gt;<br />
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.<br />
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html<br />
         */<br />
        try {<br />
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {<br />
                if (&quot;Nimbus&quot;.equals(info.getName())) {<br />
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());<br />
                    break;<br />
                }<br />
            }<br />
        } catch (ClassNotFoundException ex) {<br />
            java.util.logging.Logger.getLogger(JFrameClientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);<br />
        } catch (InstantiationException ex) {<br />
            java.util.logging.Logger.getLogger(JFrameClientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);<br />
        } catch (IllegalAccessException ex) {<br />
            java.util.logging.Logger.getLogger(JFrameClientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);<br />
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {<br />
            java.util.logging.Logger.getLogger(JFrameClientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);<br />
        }<br />
        //&lt;/editor-fold&gt;<br />
<br />
        /* Create and display the form */<br />
        java.awt.EventQueue.invokeLater(new Runnable() {<br />
            public void run() {<br />
                new JFrameClientes().setVisible(true);<br />
            }<br />
        });<br />
    }<br />
<br />
    private void jButtonInserirClienteActionPerformed(Object object) {<br />
        throw new UnsupportedOperationException(&quot;Not supported yet.&quot;); //To change body of generated methods, choose Tools | Templates.<br />
    }<br />
    private enum EstadoCliente {<br />
<br />
        INSERINDO_CLIENTE,<br />
        EDITANDO_CLIENTE,<br />
        CONSULTANDO_CLIENTE<br />
    }<br />
<br />
    private enum EstadoCompra {<br />
<br />
        INSERINDO_COMPRA,<br />
        EDITANDO_COMPRA,<br />
        CONSULTANDO_COMPRA<br />
    }<br />
    private EstadoCliente estadoCliente = EstadoCliente.CONSULTANDO_CLIENTE;<br />
    private EstadoCompra estadoCompra = EstadoCompra.CONSULTANDO_COMPRA;<br />
    private Cliente cliente;<br />
<br />
    public Cliente getCliente() {<br />
        return cliente;<br />
    }<br />
<br />
    public void setCliente(Cliente cliente) {<br />
        this.cliente = cliente;<br />
    }<br />
<br />
    private void inserirCliente() {<br />
        Cliente cliente = new Cliente();<br />
        this.clienteList.add(cliente); // Insere no clienteList para forçar a aparição de uma linha em branco no JTableClientes<br />
<br />
        // Seleciona objeto inserido na tabela e estabelece foco no campo &quot;nome&quot; (Apenas dar a sensação de inserção)<br />
        this.jTableClientes.setRowSelectionInterval(this.jTableClientes.getRowCount() - 1, this.jTableClientes.getRowCount() - 1);<br />
        this.jTextFieldNome.requestFocus();<br />
<br />
        //Configura botões para estado de Inserção<br />
        this.jButtonInserirCliente.setEnabled(false);<br />
        this.jButtonExcluirCliente.setEnabled(false);<br />
        this.jButtonCancelarCliente.setEnabled(true);<br />
        this.jButtonSalvarCliente.setEnabled(true);<br />
<br />
        this.estadoCliente = EstadoCliente.INSERINDO_CLIENTE;<br />
    }<br />
<br />
    private void salvarClienteEmAtualização() {<br />
        // Encontra e carrega o objeto de atualização com base no &quot;Id&quot;<br />
        if (cliente.encontradoId(Long.valueOf(this.jTextFieldId.getText()))) {<br />
<br />
            // Atualiza o objeto com novos valores<br />
            cliente.setNome(this.jTextFieldNome.getText());<br />
            cliente.setCidade(this.jTextFieldCidade.getText());<br />
            cliente.setCpf(this.jTextFieldCPF.getText());<br />
            cliente.setEndereco(this.jTextFieldEndereco.getText());<br />
            cliente.setEstado(this.jTextFieldEstado.getText());<br />
<br />
            if (cliente.atualizado()) { // Se atualizado objeto no BD<br />
<br />
                //Configura botões para estado de Consulta<br />
                this.jButtonInserirCliente.setEnabled(true);<br />
                this.jButtonExcluirCliente.setEnabled(this.jTableClientes.getRowCount() != 0); // Existe algo para excluir?<br />
                this.jButtonCancelarCliente.setEnabled(false);<br />
                this.jButtonSalvarCliente.setEnabled(false);<br />
<br />
                this.estadoCliente = EstadoCliente.CONSULTANDO_CLIENTE;<br />
            }<br />
        }<br />
    }<br />
<br />
    private void encontrarCliente(String CPF) {<br />
        // Encontra e carrega o objeto de atualização com base no &quot;Id&quot;<br />
        if (CPF.isEmpty()) {<br />
<br />
            // Busca todos<br />
            clienteQuery = JavaApplicationCadastroClientePUEntityManager.createQuery(&quot;SELECT c FROM Cliente c&quot;);<br />
<br />
        } else {<br />
<br />
            clienteQuery = JavaApplicationCadastroClientePUEntityManager.createQuery(&quot;SELECT c FROM Cliente c WHERE c.cpf = &quot; + CPF);<br />
        }<br />
<br />
        clienteList.clear();<br />
        clienteList.addAll(clienteQuery.getResultList());<br />
        if (jTableClientes.getRowCount() &gt; 0) {<br />
            jTableClientes.setRowSelectionInterval(0, 0);<br />
        } else {<br />
            jTextFieldNome.setText(null);<br />
            jTextFieldId.setText(null);<br />
            jTextFieldCPF.setText(null);<br />
            jTextFieldEndereco.setText(null);<br />
            jTextFieldCidade.setText(null);<br />
            jTextFieldEstado.setText(null);<br />
        }<br />
    }<br />
<br />
    private void salvarClienteEmInsercao() {<br />
        // Cria o objeto<br />
        Cliente cliente = new Cliente();<br />
<br />
        // Configura o objeto com os valores definidos nos campos<br />
        cliente.setNome(this.jTextFieldNome.getText());<br />
        cliente.setCidade(this.jTextFieldCidade.getText());<br />
        cliente.setCpf(this.jTextFieldCPF.getText());<br />
        cliente.setEndereco(this.jTextFieldEndereco.getText());<br />
        cliente.setEstado(this.jTextFieldEstado.getText());<br />
<br />
        if (cliente.armazenado()) { // Se armazenado objeto no BD<br />
<br />
            // Retira a linha em branco, selecionada na inserção, da lista e do JTableClientes<br />
            this.clienteList.remove(this.jTableClientes.getSelectedRow());<br />
            // Adiciona o novo &quot;Cliente&quot; gravado no BD, na lista e automaticamente no JTableClientes.<br />
            this.clienteList.add(cliente);<br />
<br />
            // Seleciona o último da lista<br />
            this.jTableClientes.setRowSelectionInterval(this.jTableClientes.getRowCount() - 1, this.jTableClientes.getRowCount() - 1);<br />
<br />
            //Configura botões para estado de Consulta<br />
            this.jButtonInserirCliente.setEnabled(true);<br />
            this.jButtonExcluirCliente.setEnabled(this.jTableClientes.getRowCount() != 0); // Existe algo para excluir?<br />
            this.jButtonCancelarCliente.setEnabled(false);<br />
            this.jButtonSalvarCliente.setEnabled(false);<br />
<br />
            this.estadoCliente = EstadoCliente.CONSULTANDO_CLIENTE;<br />
        }<br />
<br />
    }<br />
<br />
    private void cancelarInsercaoCliente() {<br />
<br />
        // Remove a linha em branco da lista e automaticamente do JTable<br />
        this.clienteList.remove(this.jTableClientes.getSelectedRow());<br />
        if (this.jTableClientes.getRowCount() &gt; 0) { // Se houver objetos na lista<br />
            // Seleciona o último da lista<br />
            this.jTableClientes.setRowSelectionInterval(this.jTableClientes.getRowCount() - 1, this.jTableClientes.getRowCount() - 1);<br />
        }<br />
<br />
        //Configura botões para estado de Consulta<br />
        this.jButtonInserirCliente.setEnabled(true);<br />
        this.jButtonExcluirCliente.setEnabled(this.jTableClientes.getRowCount() != 0); // Existe algo para excluir?<br />
        this.jButtonCancelarCliente.setEnabled(false);<br />
        this.jButtonSalvarCliente.setEnabled(false);<br />
<br />
        this.estadoCliente = EstadoCliente.CONSULTANDO_CLIENTE;<br />
<br />
    }<br />
<br />
    private void cancelarAtualizacaoCliente() {<br />
        // Busca o objeto com informações anteriores à atualização<br />
        Cliente cliente = new Cliente();<br />
        if (cliente.encontradoId(Long.valueOf(this.jTextFieldId.getText()))) {<br />
<br />
            // Atualiza os campos com dados sem alteração<br />
            this.jTextFieldNome.setText(cliente.getNome());<br />
            this.jTextFieldCidade.setText(cliente.getCidade());<br />
            this.jTextFieldCPF.setText(cliente.getCpf());<br />
            this.jTextFieldEndereco.setText(cliente.getEndereco());<br />
            this.jTextFieldEstado.setText(cliente.getEstado());<br />
        }<br />
<br />
        //Configura botões para estado de Consulta<br />
        this.jButtonInserirCliente.setEnabled(true);<br />
        this.jButtonExcluirCliente.setEnabled(this.jTableClientes.getRowCount() != 0); // Existe algo para excluir?<br />
        this.jButtonCancelarCliente.setEnabled(false);<br />
        this.jButtonSalvarCliente.setEnabled(false);<br />
<br />
        this.estadoCliente = EstadoCliente.CONSULTANDO_CLIENTE;<br />
<br />
    }<br />
<br />
    private void excluirCliente() {<br />
        Cliente cliente = new Cliente(); // Cria o objeto<br />
        cliente.setId(Long.valueOf(this.jTextFieldId.getText())); // Configura o id de exclusão<br />
        if (cliente.desarmazenado()) { // Exclui o objeto do BD<br />
            int linhaSelecionada = this.jTableClientes.getSelectedRow(); // Marca linha selecionada da tabela<br />
            this.clienteList.remove(this.jTableClientes.getSelectedRow()); // Remove objeto da lista e do JTabel<br />
            if (this.jTableClientes.getRowCount() &gt; 0) { // Se houver linhas na tabela<br />
                if (linhaSelecionada &gt; 0) {<br />
                    linhaSelecionada--;<br />
                }<br />
                this.jTableClientes.setRowSelectionInterval(linhaSelecionada, linhaSelecionada); // Seleciona linha marcada<br />
            }<br />
<br />
            //Configura botões para estado de Consulta<br />
            this.jButtonInserirCliente.setEnabled(true);<br />
            this.jButtonExcluirCliente.setEnabled(this.jTableClientes.getRowCount() != 0); // Existe algo para excluir?<br />
            this.jButtonCancelarCliente.setEnabled(false);<br />
            this.jButtonSalvarCliente.setEnabled(false);<br />
<br />
            this.estadoCliente = EstadoCliente.CONSULTANDO_CLIENTE;<br />
<br />
        }<br />
    }<br />
<br />
    private void configurarMudancaDeEstadoPorEdicaoCliente() {<br />
<br />
        //Configura botões para Estado de Edição<br />
        this.jButtonInserirCliente.setEnabled(false);<br />
        this.jButtonExcluirCliente.setEnabled(false);<br />
        this.jButtonCancelarCliente.setEnabled(true);<br />
        this.jButtonSalvarCliente.setEnabled(true);<br />
<br />
        if (this.estadoCliente == EstadoCliente.CONSULTANDO_CLIENTE) {<br />
            if (this.jTableClientes.getRowCount() != 0) { // Existe algo para editar?<br />
                this.estadoCliente = EstadoCliente.EDITANDO_CLIENTE;<br />
            } else {<br />
                this.jButtonInserirClienteActionPerformed(null); // Executa uma inserção<br />
            }<br />
        }<br />
    }<br />
<br />
    private void configurarClienteInicializacao() {<br />
        // Configuração da Guia Clientes<br />
        if (this.jTableClientes.getRowCount() &gt; 0) { // Se houver linhas na lista<br />
            this.jTableClientes.setRowSelectionInterval(0, 0); // Seleciona linha 0 (primeira)<br />
        }<br />
<br />
        //Configura botões para estado de Consulta<br />
        this.jButtonInserirCliente.setEnabled(true);<br />
        this.jButtonExcluirCliente.setEnabled(this.jTableClientes.getRowCount() != 0); // Existe algo para excluir?<br />
        this.jButtonCancelarCliente.setEnabled(false);<br />
        this.jButtonSalvarCliente.setEnabled(false);<br />
<br />
<br />
        // Configuração da Guia Compras<br />
        if (this.jTableCompras.getRowCount() &gt; 0) { // Se houver linhas na lista<br />
            this.jTableCompras.setRowSelectionInterval(0, 0); // Seleciona linha 0 (primeira)<br />
        }<br />
<br />
        //Configura botões para o Estado de Consulta<br />
        this.jButtonCompraInserir.setEnabled(true);<br />
        this.jButtonCompraExcluir.setEnabled(this.jTableCompras.getRowCount() != 0); // Existe registro para excluir?<br />
        this.jButtonCompraCancelar.setEnabled(false);<br />
        this.jButtonCompraSalvar.setEnabled(false);<br />
        this.estadoCompra = EstadoCompra.CONSULTANDO_COMPRA;<br />
<br />
    }<br />
<br />
<br />
    private void excluirCompra() {<br />
        Compra compra = new Compra(); // Cria o objeto<br />
        compra.setId(Long.valueOf(this.jTextFieldCompraId.getText())); // Configura o id de exclusão<br />
        if (compra.desarmazenado()) { // Exclui o objeto do BD<br />
            int linhaSelecionada = this.jTableCompras.getSelectedRow(); // Marca linha selecionada da tabela<br />
            this.compraList.remove(this.jTableCompras.getSelectedRow()); // Remove objeto da lista<br />
            if (this.jTableCompras.getRowCount() &gt; 0) { // Se houver linhas na tabela<br />
                if (linhaSelecionada &gt; 0) {<br />
                    linhaSelecionada--;<br />
                }<br />
                this.jTableCompras.setRowSelectionInterval(linhaSelecionada, linhaSelecionada); // Seleciona linha marcada<br />
            }<br />
<br />
            //Configura botões para o Estado de Consulta<br />
            this.jButtonCompraInserir.setEnabled(true);<br />
            this.jButtonCompraExcluir.setEnabled(this.jTableCompras.getRowCount() != 0); // Existe algo para excluir?<br />
            this.jButtonCompraCancelar.setEnabled(false);<br />
            this.jButtonCompraSalvar.setEnabled(false);<br />
<br />
            this.estadoCompra = EstadoCompra.CONSULTANDO_COMPRA;<br />
<br />
        }<br />
    }<br />
<br />
    private void configurarMudancaDeEstadoPorEdicaoCompra() {<br />
<br />
        //Configura botões para Estado de Edição<br />
        this.jButtonCompraInserir.setEnabled(false);<br />
        this.jButtonCompraExcluir.setEnabled(false);<br />
        this.jButtonCompraCancelar.setEnabled(true);<br />
        this.jButtonCompraSalvar.setEnabled(true);<br />
<br />
        if (this.estadoCompra == EstadoCompra.CONSULTANDO_COMPRA) {<br />
            if (this.jTableCompras.getRowCount() != 0) { // Existe algo para editar?<br />
                this.estadoCompra = EstadoCompra.EDITANDO_COMPRA;<br />
            } else {<br />
                this.jButtonInserirClienteActionPerformed(null); // Executa uma inserção<br />
            }<br />
        }<br />
    }<br />
<br />
    private void cancelarInsercaoCompra() {<br />
<br />
        // Remove a linha em branco da lista e automaticamente do JTable<br />
        this.compraList.remove(this.jTableCompras.getSelectedRow());<br />
        if (this.jTableCompras.getRowCount() &gt; 0) { // Se houver objetos na lista<br />
            // Seleciona o último da lista<br />
            this.jTableCompras.setRowSelectionInterval(this.jTableCompras.getRowCount() - 1, this.jTableCompras.getRowCount() - 1);<br />
        }<br />
<br />
    }<br />
<br />
    private void cancelarAtualizacaoCompra() {<br />
        // Busca o objeto com informações anteriores à atualização<br />
        Compra compra = new Compra();<br />
        if (compra.encontradoId(Long.valueOf(this.jTextFieldCompraId.getText()))) {<br />
<br />
            // Atualiza os campos com dados sem alteração<br />
            this.jTextFieldCompraDescricao.setText(compra.getDescricao());<br />
<br />
            this.jFormattedTextFieldCompraData.setText(new SimpleDateFormat(&quot;dd/MM/yyyy&quot;).format(compra.getData()));<br />
            DecimalFormat decimalFormat = new DecimalFormat(&quot;¤ #,##0.00&quot;);<br />
            this.jFormattedTextFieldCompraPrcUnitario.setText(decimalFormat.format(compra.getPrecoUnitario()));<br />
            this.jFormattedTextFieldCompraQtd.setText(String.valueOf(compra.getQtde()));<br />
        }<br />
<br />
        //Configura botões para o Estado de Consulta<br />
        this.jButtonCompraInserir.setEnabled(true);<br />
        this.jButtonCompraExcluir.setEnabled(this.jTableCompras.getRowCount() != 0); // Existe registro para excluir?<br />
        this.jButtonCompraCancelar.setEnabled(false);<br />
        this.jButtonCompraSalvar.setEnabled(false);<br />
        this.estadoCompra = EstadoCompra.CONSULTANDO_COMPRA;<br />
    }<br />
<br />
    private void inserirCompra() {<br />
        Compra compra = new Compra();<br />
        this.compraList.add(compra); // Insere no compraList para forçar a aparição de uma linha em branco no JTableCompras<br />
<br />
        // Seleciona objeto inserido na tabela e estabelece foco no campo &quot;nome&quot; (Apenas dar a sensação de inserção)<br />
        this.jTableCompras.setRowSelectionInterval(this.jTableCompras.getRowCount() - 1, this.jTableCompras.getRowCount() - 1);<br />
        this.jTextFieldCompraDescricao.requestFocus();<br />
<br />
        //Configura botões para estado de Inserção<br />
        this.jButtonCompraInserir.setEnabled(false);<br />
        this.jButtonCompraExcluir.setEnabled(false);<br />
        this.jButtonCompraCancelar.setEnabled(true);<br />
        this.jButtonCompraSalvar.setEnabled(true);<br />
<br />
        this.estadoCompra = EstadoCompra.INSERINDO_COMPRA;<br />
    }<br />
<br />
    private void salvarCompraEmInsercao() throws ParseException {<br />
        // Cria e configura o objeto<br />
        Compra compra = new Compra();<br />
<br />
        // Configura o objeto com os valores definidos nos campos<br />
        Cliente cliente = new Cliente();<br />
        cliente.encontradoId(Long.valueOf(this.jTextFieldId.getText()));<br />
        compra.setIdCliente(cliente);<br />
        compra.setDescricao(this.jTextFieldCompraDescricao.getText());<br />
        SimpleDateFormat data = new SimpleDateFormat(&quot;dd/MM/yyyy&quot;);<br />
        compra.setData((java.util.Date) data.parse(this.jFormattedTextFieldCompraData.getText()));<br />
        DecimalFormat decimalFormat = new DecimalFormat(&quot;¤ #,##0.00&quot;);<br />
        compra.setPrecoUnitario(decimalFormat.parse(this.jFormattedTextFieldCompraPrcUnitario.getText()).doubleValue());<br />
<br />
        compra.setQtde(Integer.parseInt(this.jFormattedTextFieldCompraQtd.getText()));<br />
<br />
        if (compra.armazenado()) { // Se armazenado objeto no BD<br />
<br />
            // Retira o objeto da lista e o adiciona com o id<br />
            this.compraList.remove(this.jTableCompras.getSelectedRow());<br />
            this.compraList.add(compra);<br />
<br />
            // Seleciona o último da lista<br />
            this.jTableCompras.setRowSelectionInterval(this.jTableCompras.getRowCount() - 1, this.jTableCompras.getRowCount() - 1);<br />
<br />
            // Configura botões em Estado de Consulta<br />
            this.jButtonCompraInserir.setEnabled(true);<br />
            this.jButtonCompraExcluir.setEnabled(this.jTableCompras.getRowCount() != 0); // Existe registro para excluir?<br />
            this.jButtonCompraCancelar.setEnabled(false);<br />
            this.jButtonCompraSalvar.setEnabled(false);<br />
<br />
            this.estadoCompra = EstadoCompra.CONSULTANDO_COMPRA;<br />
        }<br />
    }<br />
<br />
    private void salvarCompraEmAtualizacao() throws ParseException {<br />
<br />
        // Cria e configura o objeto<br />
        Compra compra = new Compra();<br />
<br />
        // Encontra e carrega o objeto de atualização<br />
        if (compra.encontradoId(Long.valueOf(this.jTextFieldCompraId.getText()))) {<br />
<br />
            // Atualiza o objeto<br />
            compra.setDescricao(this.jTextFieldCompraDescricao.getText());<br />
            SimpleDateFormat data = new SimpleDateFormat(&quot;dd/MM/yyyy&quot;);<br />
            compra.setData((java.util.Date) data.parse(this.jFormattedTextFieldCompraData.getText()));<br />
            DecimalFormat decimalFormat = new DecimalFormat(&quot;¤ #,##0.00&quot;);<br />
            compra.setPrecoUnitario(decimalFormat.parse(this.jFormattedTextFieldCompraPrcUnitario.getText()).doubleValue());<br />
            compra.setQtde(Integer.parseInt(this.jFormattedTextFieldCompraQtd.getText()));<br />
<br />
            if (compra.atualizado()) { // Se atualizado objeto no BD<br />
<br />
                // Configura botões em Estado de Consulta<br />
                this.jButtonCompraInserir.setEnabled(true);<br />
                this.jButtonCompraExcluir.setEnabled(this.jTableCompras.getRowCount() != 0); // Existe registro para excluir?<br />
                this.jButtonCompraCancelar.setEnabled(false);<br />
                this.jButtonCompraSalvar.setEnabled(false);<br />
<br />
                this.estadoCompra = EstadoCompra.CONSULTANDO_COMPRA;<br />
            }<br />
        }<br />
    }<br />
    // Variables declaration - do not modify<br />
    private javax.persistence.EntityManager JavaApplicationCadastroClientePUEntityManager;<br />
    private java.util.List&lt;controle.Cliente&gt; clienteList;<br />
    private javax.persistence.Query clienteQuery;<br />
    private java.util.List&lt;controle.Compra&gt; compraList;<br />
    private javax.persistence.Query compraQuery;<br />
    private javax.swing.JButton jButtonCancelarCliente;<br />
    private javax.swing.JButton jButtonCompraCancelar;<br />
    private javax.swing.JButton jButtonCompraExcluir;<br />
    private javax.swing.JButton jButtonCompraInserir;<br />
    private javax.swing.JButton jButtonCompraSalvar;<br />
    private javax.swing.JButton jButtonExcluirCliente;<br />
    private javax.swing.JButton jButtonInserirCliente;<br />
    private javax.swing.JButton jButtonSalvarCliente;<br />
    private javax.swing.JFormattedTextField jFormattedTextFieldCompraData;<br />
    private javax.swing.JFormattedTextField jFormattedTextFieldCompraPrcUnitario;<br />
    private javax.swing.JFormattedTextField jFormattedTextFieldCompraQtd;<br />
    private javax.swing.JLabel jLabelCidade;<br />
    private javax.swing.JLabel jLabelCpf;<br />
    private javax.swing.JLabel jLabelCpfBusca;<br />
    private javax.swing.JLabel jLabelData;<br />
    private javax.swing.JLabel jLabelDescricao;<br />
    private javax.swing.JLabel jLabelEndereco;<br />
    private javax.swing.JLabel jLabelEstado;<br />
    private javax.swing.JLabel jLabelIDCompra;<br />
    private javax.swing.JLabel jLabelId;<br />
    private javax.swing.JLabel jLabelNome;<br />
    private javax.swing.JLabel jLabelQtd;<br />
    private javax.swing.JLabel jLabelValorUnitario;<br />
    private javax.swing.JPanel jPanelCliente;<br />
    private javax.swing.JPanel jPanelCompras;<br />
    private javax.swing.JScrollPane jScrollPane1;<br />
    private javax.swing.JScrollPane jScrollPane2;<br />
    private javax.swing.JTabbedPane jTabbedPaneCliente;<br />
    private javax.swing.JTable jTableClientes;<br />
    private javax.swing.JTable jTableCompras;<br />
    private javax.swing.JTextField jTextFieldCPF;<br />
    private javax.swing.JButton jTextFieldCPFBusca;<br />
    private javax.swing.JTextField jTextFieldCidade;<br />
    private javax.swing.JTextField jTextFieldCompraDescricao;<br />
    private javax.swing.JTextField jTextFieldCompraId;<br />
    private javax.swing.JTextField jTextFieldCpfBusca;<br />
    private javax.swing.JTextField jTextFieldEndereco;<br />
    private javax.swing.JTextField jTextFieldEstado;<br />
    private javax.swing.JTextField jTextFieldId;<br />
    private javax.swing.JTextField jTextFieldNome;<br />
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;<br />
    // End of variables declaration<br />
}<br />

<!-- Converted by 0-Code HTML Converter - Trial Version -->

</body>
</html>
